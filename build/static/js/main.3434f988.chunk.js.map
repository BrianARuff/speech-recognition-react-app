{"version":3,"sources":["App.js","index.js"],"names":["App","state","transcript","confidence","isRecording","speechRecognition","window","hasOwnProperty","recognition","webkitSpeechRecognition","_this","setState","continuous","interimResults","lang","start","onresult","e","console","log","new_transcript","push","results","new_confidence","toFixed","stop","onerror","_this2","this","react_default","a","createElement","map","word","index","Fragment","key","Math","random","Date","now","className","onClick","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"4LA6DeA,oNAzDXC,MAAQ,CACJC,WAAY,GACZC,WAAY,GACZC,aAAa,KAGjBC,kBAAoB,WAChB,GAAIC,OAAOC,eAAe,2BAA4B,CAClD,IAAMC,EAAc,IAAIF,OAAOG,wBAC/BC,EAAKC,SAAS,CAACP,aAAa,IAE5BI,EAAYI,YAAa,EACzBJ,EAAYK,gBAAiB,EAE7BL,EAAYM,KAAO,QACnBN,EAAYO,QAEZP,EAAYQ,SAAW,SAACC,GACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAiBV,EAAKT,MAAMC,WAClCkB,EAAeC,KAAKJ,EAAEK,QAAQ,GAAG,GAAGpB,YACpC,IAAMqB,EAAiBb,EAAKT,MAAME,WAClCoB,EAAeF,MAAmC,IAA7BJ,EAAEK,QAAQ,GAAG,GAAGnB,YAAkBqB,QAAQ,GAAK,KACpEd,EAAKC,SAAS,CAACT,WAAYkB,EAAgBjB,WAAYoB,IACvDf,EAAYiB,OACZf,EAAKC,SAAS,CAACP,aAAa,KAGhCI,EAAYkB,QAAU,WAClBlB,EAAYiB,OACZf,EAAKC,SAAS,CAACP,aAAa,UAGhCc,QAAQC,IAAI,+GAIX,IAAAQ,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,WAEQH,KAAK3B,MAAMC,WAAW8B,IAAI,SAACC,EAAMC,GAC7B,OACIL,EAAAC,EAAAC,cAACF,EAAAC,EAAMK,SAAP,CAAgBC,IAAKC,KAAKC,SAAWC,KAAKC,OACtCX,EAAAC,EAAAC,cAAA,SAAIE,EAAJ,iBAAwBN,EAAK1B,MAAME,WAAW+B,OAK9DL,EAAAC,EAAAC,cAAA,UAAQU,UAAU,4BAA4BC,QAASd,KAAKvB,mBAA5D,2BAECuB,KAAK3B,MAAMG,YAAcyB,EAAAC,EAAAC,cAAA,gCAA6B,aApDrDY,IAAMC,YCExBC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3434f988.chunk.js","sourcesContent":["import React from \"react\";\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        transcript: [],\n        confidence: [],\n        isRecording: false,\n    }\n\n    speechRecognition = () => {\n        if (window.hasOwnProperty(\"webkitSpeechRecognition\")) {\n            const recognition = new window.webkitSpeechRecognition();\n            this.setState({isRecording: true});\n\n            recognition.continuous = true;\n            recognition.interimResults = false;\n\n            recognition.lang = \"en-US\";\n            recognition.start();\n            \n            recognition.onresult = (e) => {\n                console.log(e)\n                const new_transcript = this.state.transcript;\n                new_transcript.push(e.results[0][0].transcript);\n                const new_confidence = this.state.confidence;\n                new_confidence.push((e.results[0][0].confidence * 100).toFixed(2) + \"%\");\n                this.setState({transcript: new_transcript, confidence: new_confidence});\n                recognition.stop();\n                this.setState({isRecording: false});\n            };\n\n            recognition.onerror = () => {\n                recognition.stop();\n                this.setState({isRecording: false});\n            };\n        } else {\n            console.log(\"Use most recent version of Chrome.\")\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.transcript.map((word, index) => {\n                        return (\n                            <React.Fragment key={Math.random() * Date.now()}>\n                                <p>{word}, Confidence: {this.state.confidence[index]}</p>\n                            </React.Fragment>\n                        )\n                    })\n                }\n                <button className=\"speech-recognition-button\" onClick={this.speechRecognition}>Click to Analyse Speech\n                </button>\n                {this.state.isRecording ? <p>Analyzing Speech...</p> : null }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}